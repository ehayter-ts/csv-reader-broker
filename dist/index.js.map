{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import '@k2oss/k2-broker-core';\n\nmetadata = {\n    systemName: \"com.k2.example\",\n    displayName: \"Example Broker\",\n    description: \"An example broker that accesses JSONPlaceholder.\"\n};\n\nondescribe = async function({configuration}): Promise<void> {\n    postSchema({\n        objects: {\n            \"todo\": {\n                displayName: \"TODO\",\n                description: \"Manages a TODO list\",\n                properties: {\n                    \"id\": {\n                        displayName: \"ID\",\n                        type: \"number\"\n                    },\n                    \"userId\": {\n                        displayName: \"User ID\",\n                        type: \"number\"\n                    },\n                    \"title\": {\n                        displayName: \"Title\",\n                        type: \"string\"\n                    },\n                    \"completed\": {\n                        displayName: \"Completed\",\n                        type: \"boolean\"\n                    }\n                },\n                methods: {\n                    \"get\": {\n                        displayName: \"Get TODO\",\n                        type: \"read\",\n                        inputs: [ \"id\" ],\n                        outputs: [ \"id\", \"userId\", \"title\", \"completed\" ]\n                    },\n                    \"getParams\": {\n                        displayName: \"Get TODO\",\n                        type: \"read\",\n                        parameters: {\n                            \"pid\" : { displayName: \"param1\", description: \"Description Of Param 1\", type: \"number\"} \n                        },\n                        requiredParameters: [ \"pid\" ],\n                        outputs: [ \"id\" ]\n                    }\n                }\n            }\n        }\n    });\n}\n\nonexecute = async function({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\n    switch (objectName)\n    {\n        case \"todo\": await onexecuteTodo(methodName, properties, parameters); break;\n        default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n    }\n}\n\nasync function onexecuteTodo(methodName: string, properties: SingleRecord, parameters: SingleRecord): Promise<void> {\n    switch (methodName)\n    {\n        case \"get\": await onexecuteTodoGet(properties); break;\n        case \"getParams\": await onexecuteTodoGetWithParams(parameters); break;\n        default: throw new Error(\"The method \" + methodName + \" is not supported.\");\n    }\n}\n\nfunction onexecuteTodoGet(properties: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            try {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status !== 200) throw new Error(\"Failed with status \" + xhr.status);\n\n                var obj = JSON.parse(xhr.responseText);\n                postResult({\n                    \"id\": obj.id,\n                    \"userId\": obj.userId,\n                    \"title\": obj.title,\n                    \"completed\": obj.completed\n                });\n                resolve();\n            } catch (e) {\n                reject(e);\n            }\n        };\n        \n        if(typeof properties[\"id\"] !== \"number\") throw new Error(\"properties[\\\"id\\\"] is not of type number\");\n        xhr.open(\"GET\", 'https://jsonplaceholder.typicode.com/todos/' + encodeURIComponent(properties[\"id\"]));\n        xhr.setRequestHeader('test', 'test value');\n        xhr.send();\n    });\n}\n\nfunction onexecuteTodoGetWithParams(parameters: SingleRecord): Promise<void> {\n    return new Promise<void>((resolve, reject) =>\n    {\n        try {\n            postResult({\n                \"id\": parameters[\"pid\"]\n            });\n            resolve();\n        } catch (e) {\n            reject(e);\n        }\n        \n    });\n}"],"names":["metadata","systemName","displayName","description","ondescribe","async","configuration","postSchema","objects","properties","type","methods","inputs","outputs","parameters","requiredParameters","onexecute","objectName","methodName","schema","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","id","userId","title","completed","e","open","encodeURIComponent","setRequestHeader","send","onexecuteTodoGet","onexecuteTodoGetWithParams","onexecuteTodo"],"mappings":"AAEAA,SAAW,CACPC,WAAY,iBACZC,YAAa,iBACbC,YAAa,oDAGjBC,WAAaC,gBAAeC,cAACA,IACzBC,WAAW,CACPC,QAAS,MACG,CACJN,YAAa,OACbC,YAAa,sBACbM,WAAY,IACF,CACFP,YAAa,KACbQ,KAAM,iBAEA,CACNR,YAAa,UACbQ,KAAM,gBAED,CACLR,YAAa,QACbQ,KAAM,oBAEG,CACTR,YAAa,YACbQ,KAAM,YAGdC,QAAS,KACE,CACHT,YAAa,WACbQ,KAAM,OACNE,OAAQ,CAAE,MACVC,QAAS,CAAE,KAAM,SAAU,QAAS,wBAE3B,CACTX,YAAa,WACbQ,KAAM,OACNI,WAAY,KACA,CAAEZ,YAAa,SAAUC,YAAa,yBAA0BO,KAAM,WAElFK,mBAAoB,CAAE,OACtBF,QAAS,CAAE,aAQnCG,UAAYX,gBAAeY,WAACA,EAADC,WAAaA,EAAbJ,WAAyBA,EAAzBL,WAAqCA,EAArCH,cAAiDA,EAAjDa,OAAgEA,WAC/EF,OAEC,aAKbZ,eAA6Ba,EAAoBT,EAA0BK,UAC/DI,OAEC,YAMb,SAA0BT,UACf,IAAIW,QAAc,CAACC,EAASC,SAE3BC,EAAM,IAAIC,kBACdD,EAAIE,mBAAqB,kBAEM,IAAnBF,EAAIG,WAAkB,UACP,MAAfH,EAAII,OAAgB,MAAM,IAAIC,MAAM,sBAAwBL,EAAII,YAEhEE,EAAMC,KAAKC,MAAMR,EAAIS,cACzBC,WAAW,IACDJ,EAAIK,UACAL,EAAIM,aACLN,EAAIO,gBACAP,EAAIQ,YAErBhB,IACF,MAAOiB,GACLhB,EAAOgB,KAIgB,iBAArB7B,EAAU,GAAqB,MAAM,IAAImB,MAAM,0CACzDL,EAAIgB,KAAK,MAAO,8CAAgDC,mBAAmB/B,EAAU,KAC7Fc,EAAIkB,iBAAiB,OAAQ,cAC7BlB,EAAImB,SA/BcC,CAAiBlC,aAC9B,kBAkCb,SAAoCK,UACzB,IAAIM,QAAc,CAACC,EAASC,SAG3BW,WAAW,IACDnB,EAAU,MAEpBO,IACF,MAAOiB,GACLhB,EAAOgB,MA3CaM,CAA2B9B,uBACpC,IAAIc,MAAM,cAAgBV,EAAa,uBAVnC2B,CAAc3B,EAAYT,EAAYK,uBAC1C,IAAIc,MAAM,cAAgBX,EAAa"}